pluginManagement {
	repositories {
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		maven {
			name = 'Forge'
			url = 'https://maven.minecraftforge.net/'
		}
		maven {
			name = 'NeoForge'
			url = 'https://maven.neoforged.net/releases'
		}
		maven {
			name = 'Parchment'
			url = 'https://maven.parchmentmc.org/'
		}
		maven {
			name = 'Spongepowered (Mixin)'
			url = 'https://repo.spongepowered.org/repository/maven-public/'
		}
		maven {
			name = 'ModPublisher https://github.com/firstdarkdev/modpublisher'
			url "https://maven.firstdark.dev/releases"
		}
		mavenCentral()
		gradlePluginPortal()
	}
}

plugins {
	id 'org.gradle.toolchains.foojay-resolver-convention' version '0.8.0'
}

rootProject.name = "${mod_id}"

if(file("${rootDir}/api").exists()) {//Check if API folder exists, if it does, include it
	include 'api'
}
include 'common'
include 'fabric'
include 'forge'
if(!"${mod_id}".toString().equals("all")) { //We don't need NeoForge in an "all" composite build
	include 'neoforge'
}

if (!"${mod_id}".toString().equals("ichunutil")) { // We're either a mod that depends on iChunUtil or we're in a composite build for multiple mods
	if ("${mod_id}".toString().equals("all")) {
		def excludedMods = [
//				"BetterThanBunnies",
//		        "Ding"
		]

		gradle.ext.projectSubMods = []
		file("${rootDir}/..").eachDir {
			if(!it.equals(rootDir) && !it.name.toLowerCase(Locale.ROOT).startsWith("temp") && !excludedMods.contains(it.name) && file("${rootDir}/../${it.name}/build.gradle").exists() && file("${rootDir}/../${it.name}/build.cmd").exists()) {
				println "Including ${it.name} in build!"
				gradle.ext.projectSubMods.add(it.name)
			}
		}
	}
	else {
		gradle.ext {
			// Add any mods if you'd like if you're not in an "all" composite build. Just be aware it will add to gradle setup time.
			projectSubMods = [
					"iChunUtil" // Do not comment out - You will have a bad time.
			]
		}
	}

	if (!gradle.ext.projectSubMods.contains("iChunUtil") || !file("../iChunUtil").exists()) {
		println "\u001B[31m=====================================================================\u001B[0m"
		println "\u001B[31mCannot find iChunUtil in list of sub-mods!                           \u001B[0m"
		println "\u001B[31mDouble check your settings.gradle file and make sure iChunUtil exists\u001B[0m"
		println "\u001B[31m=====================================================================\u001B[0m"
	}
	else {
		gradle.ext.projectSubMods.forEach { mod ->
			if(file("../${mod}").exists()) {
				includeBuild("../${mod}") {
					def modIdLowerCase = "${mod}".toString().toLowerCase(Locale.ROOT)
					name = modIdLowerCase
					dependencySubstitution {
						//I won't know the mod version. We special case for composite builds anyway
						if(file("../${mod}/api").exists()) {
							substitute module("me.ichun.mods:${modIdLowerCase}:${minecraft_version}-api") using project(":api")
						}
						substitute module("me.ichun.mods:${modIdLowerCase}:${minecraft_version}-common") using project(":common")
						substitute module("me.ichun.mods:${modIdLowerCase}:${minecraft_version}-fabric") using project(":fabric")
						substitute module("me.ichun.mods:${modIdLowerCase}:${minecraft_version}-forge") using project(":forge")
						substitute module("me.ichun.mods:${modIdLowerCase}:${minecraft_version}-neoforge") using project(":neoforge")
					}
				}
			}
			else {
				println "${mod} defined as included build in composite build but directory cannot be found!"
			}
		}
	}
}